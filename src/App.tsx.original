import React, { useState } from 'react';
import { Search, ShoppingCart, Menu, Star, Heart, Upload, Loader2 } from 'lucide-react';
import * as XLSX from 'xlsx';

// Product type definition with optional fields
interface Product {
  id: number;
  sku?: string;              // Item SKU
  shortDescription?: string; // Item Short Description
  fullDescription?: string;  // Full Description
  isDeleted?: boolean;      // Delete Flag
  isDiscontinued?: boolean; // Discontinued
  sellingUnit?: string;     // Selling unit
  warehouse?: string;       // Warehouse ID
  currentQty?: number;      // Current Quantity (Qty_On_Hand)
  allocatedQty?: number;    // Current Quantity Allocated
  productGroup?: string;    // Name of the Product Group
  cost?: number;           // TMD Custom Cost
  supplierName?: string;   // Manufacturer Name
  inventoryClass?: string; // Inventory Class
  upc?: string;           // Universal Product Code
  weight?: number;        // Weight of SKU
  volume?: number;        // Volume of SKU
  image?: string;         // Link to image
}

function App() {
  const [selectedCategory, setSelectedCategory] = useState("All Categories");
  const [products, setProducts] = useState<Product[]>([]);
  const [error, setError] = useState<string>("");
  const [isLoading, setIsLoading] = useState(false);
  const [progress, setProgress] = useState({ current: 0, total: 0 });

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    console.log("File upload started");
    const file = event.target.files?.[0];
    
    if (!file) {
      console.log("No file selected");
      return;
    }

    console.log("File selected:", file.name);
    setError("");
    setIsLoading(true);
    setProgress({ current: 0, total: 0 });

    try {
      if (!file.name.match(/\.(xlsx|xls)$/)) {
        setError("Please upload an Excel file (.xlsx or .xls)");
        setIsLoading(false);
        console.log("Invalid file type");
        return;
      }

      const arrayBuffer = await file.arrayBuffer();
      console.log("File loaded into buffer");
      
      const workbook = XLSX.read(new Uint8Array(arrayBuffer), { type: 'array' });
      console.log("Workbook read successfully");
      
      const firstSheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[firstSheetName];
      
      const jsonData = XLSX.utils.sheet_to_json(worksheet);
      console.log("Data converted to JSON, total rows:", jsonData.length);
      
      const totalItems = jsonData.length;
      setProgress({ current: 0, total: totalItems });

      // Process items in chunks to show progress
      const chunkSize = 100;
      const newProducts: Product[] = [];

      for (let i = 0; i < jsonData.length; i += chunkSize) {
        const chunk = jsonData.slice(i, i + chunkSize);
        console.log(`Processing chunk ${i / chunkSize + 1}`);
        
        // Process chunk
        const processedChunk = chunk.map((row: any, index) => ({
          id: i + index + 1,
          sku: row.item_id,
          shortDescription: row.Item_description,
          fullDescription: row.Extended_Description,
          isDeleted: row.Delete_Flag === 'y',
          isDiscontinued: row.Discontinued === 'y',
          sellingUnit: row.Sales_Pricing_unit,
          warehouse: row.Location_ID,
          currentQty: row.Qty_On_Hand ? parseFloat(row.Qty_On_Hand) : undefined,
          allocatedQty: row.Qty_On_Allocated ? parseFloat(row.Qty_On_Allocated) : undefined,
          productGroup: row.Product_Group_Description,
          cost: row.Cost ? parseFloat(row.Cost) : undefined,
          supplierName: row.Supplier_Name,
          inventoryClass: row.Class_ID5,
          upc: row.upc_code,
          weight: row.weight ? parseFloat(row.weight) : undefined,
          volume: row.cube ? parseFloat(row.cube) : undefined,
          image: row.image || 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=500&q=80'
        }));

        newProducts.push(...processedChunk);
        
        // Update progress
        setProgress(prev => {
          const current = Math.min(i + chunkSize, totalItems);
          console.log(`Progress: ${current}/${totalItems}`);
          return { ...prev, current };
        });
        
        // Allow UI to update
        await new Promise(resolve => setTimeout(resolve, 0));
      }

      // Filter out deleted items
      const activeProducts = newProducts.filter(p => !p.isDeleted);
      console.log("Processing complete, active products:", activeProducts.length);
      setProducts(activeProducts);
    } catch (err) {
      console.error("Error processing file:", err);
      setError("Error parsing Excel file. Please check the format.");
    } finally {
      setIsLoading(false);
      setProgress({ current: 0, total: 0 });
      console.log("File processing completed");
    }
  };

  // Group products by their product group, handling null/undefined values
  const categories = Array.from(new Set(products.map(p => p.productGroup || 'Uncategorized')));

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-gray-900 text-white">
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between py-4">
            <div className="flex items-center space-x-4">
              <Menu className="h-6 w-6 cursor-pointer" />
              <h1 className="text-2xl font-bold">Inventory Management</h1>
            </div>
            
            <div className="flex-1 max-w-2xl mx-4">
              <div className="relative">
                <input
                  type="text"
                  placeholder="Search inventory..."
                  className="w-full py-2 px-4 pr-10 rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <Search className="absolute right-3 top-2.5 h-5 w-5 text-gray-500" />
              </div>
            </div>

            <div className="flex items-center space-x-6">
              <ShoppingCart className="h-6 w-6 cursor-pointer" />
              <button className="bg-blue-600 px-4 py-2 rounded-lg hover:bg-blue-700 transition">
                Sign In
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Upload Section */}
      <div className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex-1">
              <label htmlFor="excel-upload" className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg cursor-pointer hover:bg-blue-700 transition">
                <Upload className="h-5 w-5 mr-2" />
                <span>Upload Inventory Excel File</span>
              </label>
              <input
                id="excel-upload"
                type="file"
                accept=".xlsx,.xls"
                onChange={handleFileUpload}
                className="hidden"
              />
              {error && <p className="text-red-500 text-sm mt-2">{error}</p>}
              {isLoading && (
                <div className="flex items-center space-x-3 mt-3">
                  <Loader2 className="h-5 w-5 text-blue-600 animate-spin" />
                  <span className="text-sm text-gray-600">
                    Processing... {progress.current} of {progress.total} items
                  </span>
                  {progress.total > 0 && (
                    <div className="w-48 h-2 bg-gray-200 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-blue-600 transition-all duration-300"
                        style={{ width: `${(progress.current / progress.total) * 100}%` }}
                      />
                    </div>
                  )}
                </div>
              )}
            </div>
            <div className="text-sm text-gray-500">
              {products.length} items in inventory
            </div>
          </div>
        </div>
      </div>

 {/* Categories */}
      <div className="bg-white shadow">
        <div className="container mx-auto px-4">
          <div className="flex items-center space-x-6 py-3 overflow-x-auto">
            <button
              onClick={() => setSelectedCategory("All Categories")}
              className={`whitespace-nowrap px-3 py-1 rounded-full ${
                selectedCategory === "All Categories"
                  ? "bg-blue-600 text-white"
                  : "text-gray-600 hover:bg-gray-100"
              }`}
            >
              All Categories
            </button>
            {categories.map((category) => (
              <button
                key={category}
                onClick={() => setSelectedCategory(category)}
                className={`whitespace-nowrap px-3 py-1 rounded-full ${
                  selectedCategory === category
                    ? "bg-blue-600 text-white"
                    : "text-gray-600 hover:bg-gray-100"
                }`}
              >
                {category}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {products
            .filter(product => 
              selectedCategory === "All Categories" || 
              product.productGroup === selectedCategory
            )
            .map((product) => (
              <div key={product.id} className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition">
                <div className="relative">
                  <img
                    src={product.image}
                    alt={product.shortDescription || 'Product Image'}
                    className="w-full h-48 object-cover"
                  />
                  <button className="absolute top-2 right-2 p-1.5 bg-white rounded-full shadow hover:bg-gray-100">
                    <Heart className="h-5 w-5 text-gray-600" />
                  </button>
                </div>
                
                <div className="p-4">
                  {product.supplierName && (
                    <div className="text-sm text-gray-600 mb-1">{product.supplierName}</div>
                  )}
                  <h3 className="text-lg font-semibold mb-2">{product.shortDescription || 'No Description'}</h3>
                  {product.fullDescription && (
                    <p className="text-gray-600 text-sm mb-2">{product.fullDescription}</p>
                  )}
                  
                  {product.sku && (
                    <div className="flex items-center mb-2">
                      <span className="text-sm text-gray-600">SKU: {product.sku}</span>
                    </div>
                  )}
                  
                  <div className="flex items-center justify-between">
                    <span className="text-xl font-bold">
                      {product.cost !== undefined ? `$${product.cost.toFixed(2)}` : 'Price N/A'}
                    </span>
                    <div className="text-sm text-gray-600">
                      Stock: {product.currentQty !== undefined ? product.currentQty : 'N/A'} 
                      {product.sellingUnit ? ` ${product.sellingUnit}` : ''}
                    </div>
                  </div>
                </div>
              </div>
            ))}
        </div>
      </main>
      {/* Pagination Controls */}
            {totalPages > 1 && (
              <div className="container mx-auto px-4 py-4 flex justify-center">
                <button
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="px-4 py-2 mx-1 rounded bg-gray-200 hover:bg-gray-300 disabled:opacity-50"
                >
                  Previous
                </button>

                {/* Page Numbers */}
                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                  let pageNumber = i + 1;

                  // Adjust page numbers based on current page to show a sliding window
                  if (totalPages > 5) {
                    if (currentPage <= 3) {
                      pageNumber = i + 1;
                    } else if (currentPage >= totalPages - 2) {
                      pageNumber = totalPages - 4 + i;
                    } else {
                      pageNumber = currentPage - 2 + i;
                    }
                  }

                  return (
                    <React.Fragment key={pageNumber}>
                      {/* Show ellipsis if needed */}
                      {i === 0 && pageNumber > 1 && totalPages > 5 && <span className="px-2 py-2">...</span>}

                      <button
                        onClick={() => handlePageChange(pageNumber)}
                        className={`px-4 py-2 mx-1 rounded ${
                          currentPage === pageNumber ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-gray-300'
                        }`}
                      >
                        {pageNumber}
                      </button>

                      {/* Show ellipsis if needed */}
                      {i === Math.min(4, totalPages - 1) && pageNumber < totalPages && totalPages > 5 && <span className="px-2 py-2">...</span>}
                    </React.Fragment>
                  );
                })}

                <button
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="px-4 py-2 mx-1 rounded bg-gray-200 hover:bg-gray-300 disabled:opacity-50"
                >
                  Next
                </button>
              </div>
    </div>
  );
}

export default App;